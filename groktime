#!/usr/bin/perl
#
# groktime -- part of MBPerl
#
# Copyright (c) 2023 Michael Banack <github@banack.net>
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

BEGIN {
    if (defined($ENV{'HOME'})) {
        eval("use lib '$ENV{HOME}/bin/MBPerl'");
    } else {
        my $USERNAME = getpwuid($<);
        if ($USERNAME eq 'root') {
            eval("use lib '/root/bin/MBPerl'");
        } elsif (-d "/home/" . $USERNAME) {
            eval("use lib '/home/$USERNAME/bin/MBPerl'");
        }
    }
}

use MBBasic;

use strict;
use warnings;

my %options;

$MBBasic::PROGRAM_VERSION = "1.0";
$MBBasic::PROGRAM_AUTHOR = "Michael Banack";
$MBBasic::PROGRAM_COPYRIGHT_DATE = "2023";

my $gScriptOptions = { };

sub ExtraUsage() {
    Console("Usage: groktime pattern\n");
    Console("\tgroktime: Convert time units\n");
    Console("Examples:\n");
    Console("\tgroktime 1000s\n");
    Console("\tgroktime 10m40s\n");
}

sub Main() {
    MBBasic::SetExtraUsage(\&ExtraUsage);
    MBBasic::LoadOptions($gScriptOptions, 'groktime');
    MBBasic::Init();

    my $matchingOnly = $OPTIONS->{matchingOnly};

    my $inputTime = $OPTIONS->{bareOptions}->[0];
    VERIFY($inputTime, "No timespec!");

    my $rawSeconds;

    #$rawSeconds = ParseTime($inputTime);
    if ($inputTime =~ /^(\d+)s?$/) {
        $rawSeconds = $1;
    } else {
        Panic("Bad timespec");
    }
    my $t;

    $t = sprintf("%f", $rawSeconds);
    Console("$t seconds.\n");

    $t = sprintf("%f", $rawSeconds / 60);
    Console("$t minutes.\n");

    $t = sprintf("%f", $rawSeconds / 60 / 60);
    Console("$t hours.\n");

    $t = sprintf("%f", $rawSeconds / 60 / 60 / 24);
    Console("$t days.\n");

    MBBasic::Exit();
    return 0;
}

# Call the main routine.
my $exitCode;
eval {
    $exitCode = Main();
}; Panic($@) if $@;
exit $exitCode;
