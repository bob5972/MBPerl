#!/usr/bin/perl
#
# groktime -- part of MBPerl
#
# Copyright (c) 2023 Michael Banack <github@banack.net>
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

BEGIN {
    if (defined($ENV{'HOME'})) {
        eval("use lib '$ENV{HOME}/bin/MBPerl'");
    } else {
        my $USERNAME = getpwuid($<);
        if ($USERNAME eq 'root') {
            eval("use lib '/root/bin/MBPerl'");
        } elsif (-d "/home/" . $USERNAME) {
            eval("use lib '/home/$USERNAME/bin/MBPerl'");
        }
    }
}

use MBBasic;

use strict;
use warnings;

my %options;

$MBBasic::PROGRAM_VERSION = "1.0";
$MBBasic::PROGRAM_AUTHOR = "Michael Banack";
$MBBasic::PROGRAM_COPYRIGHT_DATE = "2023";

my $gScriptOptions = { };

sub ExtraUsage() {
    Console("Usage:  groktime pattern\n");
    Console("\tgroktime: Convert time units\n");
    Console("Examples:\n");
    Console("\tgroktime 1000s\n");
    Console("\tgroktime 100years\n");
    Console("\tgroktime 1Y2M3W4d5h6m7s8ms9ns\n");
}

my $DC = 1.0 / 60 / 60 / 24;

my $gUnits = [
    ['nanoseconds',  'ns', 1000 * 1000 * 1000.0],
    ['microseconds', 'us', 1000 * 1000.0],
    ['milliseconds', 'ms', 1000.0],
    ['seconds',       's', 1.0],
    ['minutes',       'm', 1.0 / 60],
    ['hours',         'h', 1.0 / 60 / 60],
    ['days',          'd', $DC],
    ['weeks',         'W', $DC / 7],
    ['months',        'M', $DC / 30.436875],
    ['years',         'Y', $DC / 365.25],
];

sub GetConvFromSeconds($) {
    my $name = shift;

    for my $x (@{$gUnits}) {
        my $u = $x->[0];
        my $a = $x->[1];
        my $conv = $x->[2];

        if ($name eq $u || $name eq $a) {
            return $conv;
        }
    }

    Panic("Unknown unit/suffix: $name");
}

sub ConvToSeconds($$) {
    my $value = shift;
    my $unit = shift;

    my $c = GetConvFromSeconds($unit);

    return $value / $c;
}

sub ParseTime($) {
    my $spec = shift;

    my $t = 0;

    while ($spec) {
        if ($spec =~ /^\s*(\d+(?:\.\d+)?)\s*([a-zA-Z]*)\s*(.*)$/) {
            my $value = $1;
            my $unit = $2;
            $spec = $3;

            $t += ConvToSeconds($value, $unit);
        } else {
            Panic("Bad timespec: $spec");
        }
    }

    return $t;
}

sub Main() {
    MBBasic::SetExtraUsage(\&ExtraUsage);
    MBBasic::LoadOptions($gScriptOptions, 'groktime');
    MBBasic::Init();

    my $matchingOnly = $OPTIONS->{matchingOnly};

    my $inputTime = $OPTIONS->{bareOptions}->[0];
    VERIFY($inputTime, "No timespec!");

    my $rawSeconds = 0;

    $rawSeconds = ParseTime($inputTime);

    for my $x (@{$gUnits}) {
        my $u = $x->[0];
        my $a = $x->[1];
        my $conv = $x->[2];
        my $t;

        $t = $rawSeconds * $conv;
        if (($conv <= 1.0 && $t > 0.1) ||
            ($conv >= 1.0 && $rawSeconds <= 1.0)) {
            $t = sprintf("%12.1f", $t);
            Console("$t $u\n");
        }
    }

    MBBasic::Exit();
    return 0;
}

# Call the main routine.
my $exitCode;
eval {
    $exitCode = Main();
}; Panic($@) if $@;
exit $exitCode;
